#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'timetracker'
rescue LoadError
  STDERR.puts "In development, you need to use `bundle exec bin/timetracker` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/timetracker now"
  exit 64
end

include GLI::App

program_desc 'Track, manage, and query a task tree where each node is a potential project or task'

version Timetracker::VERSION

#desc 'Describe some switch here'
#switch [:s,:switch]

#desc 'Describe some flag here'
#default_value 'the default'
#arg_name 'The name of the argument'
#flag [:f,:flagname]
#
#


# specify special date format
accept(Date) do |string|
      Date.parse(string)
end

desc 'Specify the file where the task tree lives'
arg_name 'path'
default_value File.join(ENV['HOME'],'.tasktree.yml')
flag [:t,:tasktree]

desc 'Be verbose'
switch 'verbose'


desc 'Show task tree'
long_desc <<EOS
List the tasks in your task tree, possibly including time worked.  By default,
this will list all tree nodes and not other information.
EOS

#arg_name 'Describe arguments to list here'

command [:show,:sh] do |c|

    #c.desc 'Describe a switch to list'
    #c.switch :s

    #c.desc 'Describe a flag to list'
    #c.default_value 'default'
    #c.flag :f

    c.action do |global_options,options,args|

        # Your command logic here

        # If you have any errors, just raise them
        # raise "that command made no sense"

        puts "list command ran"
    end
    
    c.desc 'Show tree with names'
    c.command :tree do |all|
        all.action do 
            #Claret::TaskListTerminalSerializer.new(:all).write($task_list)
        end
    end

    #c.default_command :tree
end

#desc 'Describe add here'
#arg_name 'Describe arguments to add here'
#command :add do |c|
    #c.action do |global_options,options,args|
        #puts "add command ran"
    #end
#end

pre do |global,command,options,args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
end

post do |global,command,options,args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
end

on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    true
end

exit run(ARGV)
